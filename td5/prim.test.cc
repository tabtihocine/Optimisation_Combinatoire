#include "prim.h"
#include "main_utils.h"
#include "graph_utils.h"
#include <algorithm>
#include <string>
#include <sstream>
#include <vector>
using namespace std;

int main() {
  {
    cout << "Simple examples." << endl;

    CHECK_EQ(Prim(3, {{0, 1, 3}, {1, 2, 4}, {2, 0, 5}}), 7);
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_EQ(Prim(4, {{0, 1, 23}, {1, 3, 13}, {2, 1, 6}, {3, 2, 11}, {0, 2, 41}}), 40);
    cout << "PASSED at line " << __LINE__ << endl;

    CHECK_EQ(Prim(5, {{1, 2, 1}, {2, 3, 2}, {3, 4, 3}, {4, 0, 4}, {0, 1, 5},
                      {3, 0, 1}, {4, 1, 2}, {0, 2, 3}, {1, 3, 4}, {2, 4, 5}}),
             6);
    cout << "PASSED at line " << __LINE__ << endl;
  }
  {
    cout << "Corner cases." << endl;

    // Just one node, no edge.
    CHECK_EQ(Prim(1, {}), 0);
    cout << "PASSED at line " << __LINE__ << endl;

    // Zero node
    CHECK_EQ(Prim(0, {}), 0);
    cout << "PASSED at line " << __LINE__ << endl;

    // Zero weights.
    CHECK_EQ(Prim(10, {{1, 2, 0}, {2, 3, 0}, {3, 4, 0}, {4, 5, 0}, {5, 6, 0},
                       {6, 7, 0}, {7, 8, 0}, {8, 9, 0}, {9, 0, 0}, {0, 1, 0},
                       {1, 6, 0}, {2, 7, 0}, {3, 8, 0}, {4, 9, 0}, {5, 0, 0}}),
             0);
    cout << "PASSED at line " << __LINE__ << endl;
  }

  const int trials = 1000;
  const int expected[2][1000] = {
    {31825,70462,31682,10672,94911,12038,23165,158009,3022,3925,3548,6166,21543,1109,27743,11982,196141,186897,15775,20992,49593,141847,80388,14196,5356,13781,50715,11812,112246,5044,40061,828121,33294,5967,12195,140064,55077,57065,2659,109147,10444,9089,151781,32485,147449,52347,92342,7948,4122,25875,53965,28727,48496,131717,14629,3320,9614,242901,11681,279077,13029,56764,135532,808663,7738,3824,95865,130306,162203,197165,220688,5209,1437,46107,3177,1015,17726,678609,127247,124307,24678,123721,180842,35537,2980,3205,10253,5087,117173,39049,442588,3594,22387,77584,69702,2488,78496,341297,192412,17129,4636,63581,115101,1028,2917,2074,3119,13370,53085,3657,6664,18287,187012,123743,1082,49933,38812,10372,22183,77607,5715,1131,87326,11633,3127,28079,39795,7670,4914,251070,3054,1166,17275,118443,3486,946995,23950,175569,993,2271,92097,49804,59634,7776,3555,44481,67237,1450,8310,673682,9236,6801,211515,71291,10550,203964,30952,85481,368721,3867,230397,77818,420007,142834,32223,19119,13753,6146,118424,1327,244214,66406,7725,17651,41712,51403,289,707555,32568,125801,23778,16472,15786,1288,3331,60940,16020,98272,15595,67724,693,148668,40140,9432,38428,17591,232859,125913,195950,1566,5643,53485,141705,152248,138909,186637,6171,98528,483239,26999,24194,14433,237634,6463,1428,419641,10994,84526,8372,121364,119314,30129,40409,21067,74256,22547,146275,76498,369,1623,2223,58226,1267,51492,912220,115952,1268950,13898,27322,122737,21748,67496,312755,67987,22752,6857,129464,54507,10617,691713,25701,8600,142744,171264,2631,24449,176788,356,12522,85216,543213,6016,13341,73540,9482,5632,47637,36859,9969,194302,93626,232205,26168,31505,651,3212,14898,2070,94681,457423,64923,4555,38863,45290,2163,14162,108767,15384,194376,103275,28706,21244,27212,379979,1319,550,21840,2794,113498,31838,13920,267439,6226,35865,139822,5669,81317,2035,65611,6113,654417,1106,16717,8760,23596,24126,462475,53313,27716,948,1422,10052,3770,1336,56878,240849,12381,22564,17721,816,11916,4412,45709,43678,372053,22344,5627,157179,64544,424614,18784,43056,20095,9816,933,211011,6384,5208,48476,65100,279279,314387,157019,7491,33441,21152,15511,136334,54842,50626,132674,645794,6567,45354,366643,6293,20400,54016,8779,8791,33371,466910,33738,34162,2416,51868,198820,8239,145553,441725,776,69937,103158,29886,69925,322735,34891,13290,83528,31333,624811,23277,4559,3809,56310,293446,12423,11227,101188,595354,10999,293497,306296,15747,89389,25691,7992,47638,61096,43819,112275,28550,59843,4193,8372,364788,130621,5431,18288,28446,14084,187348,74968,45066,181135,186455,38788,1328,97626,699815,3263,67252,20918,26477,52664,13378,8326,2649,4668,257178,3290,188417,91575,12418,213637,52699,2901,13209,93678,480987,4778,29326,1101,108688,15513,802,20629,8942,126838,430910,348887,98306,1537,89410,6137,1942,26953,4360,14153,5224,5975,19688,12190,96488,1875,46983,1079071,262162,15703,123959,29028,494520,16817,14097,7326,3842,28750,16161,162042,20351,308651,28773,17669,21273,6038,110831,241330,126219,561936,28995,17086,95471,5738,11677,3749,269642,1860,10211,85054,89515,184073,26733,40066,64411,1483,112718,769,421147,12982,10895,923,43384,26027,144554,210760,37829,725,57704,10549,87635,521391,16208,17605,9929,24692,1903,167011,55188,12615,284741,133717,36672,7996,98991,180457,25635,88155,82332,128094,9436,8085,36712,53407,274283,131553,22471,28839,2684,78645,67209,49625,59118,1325682,370827,14592,851,564857,8025,75557,170318,43436,72372,8790,27132,79933,74288,71899,29890,3891,59447,832,3986,36321,19260,10637,27246,1435,1020961,23998,165533,1012,964301,17692,66854,22581,14251,1789,3037,20426,209819,32647,16849,4001,12703,76628,7532,92887,253161,88836,1149,93833,77541,26689,37293,61890,1341,408069,134430,4105,1053,10762,160091,1825,77487,505061,37129,19541,226005,464496,607390,37741,2587,62182,86989,267591,22021,187457,253573,14990,940,503811,17643,68305,88741,2115,346524,1486,141235,74340,57958,18867,141692,33301,51355,485578,500735,21085,418346,111219,4871,7850,1639,1325,36533,3732,49335,118954,36104,979,231933,119652,1494,30810,31871,1614124,3821,6482,1829,65853,976,5172,17197,19943,297470,1481,631225,11731,683282,8439,9868,9316,341167,27753,5001,6566,158436,38493,170954,1838,33104,216692,11601,39534,7636,19886,61070,670837,5772,14686,997,261793,125139,17382,1127,98546,435812,20760,2609,5303,24361,16948,10473,31275,69240,91822,427678,83438,407515,5031,18177,609529,350204,33404,39522,4478,6356,715533,64228,2753,63732,728,97881,819,1684,8881,5565,336201,3218,56995,223092,41681,104837,11652,238227,163271,60454,3080,731,1024,170749,17337,95208,5054,28449,643,85570,106251,1066912,82088,8301,370855,177468,15322,4357,41583,20060,46184,177843,9243,1325,11641,157180,48810,1839,11671,15468,5213,329136,4033,4528,54814,6051,25407,233681,160442,225128,705964,12629,190223,157402,10872,928,317819,8160,164506,307273,75789,631,471868,312412,12253,718681,111980,9147,110728,2549,177847,2858,10086,105720,24969,1092,58526,12822,80855,86180,490021,29063,22738,585166,34320,210314,44611,1347,667694,86569,25153,90827,15191,19802,4777,82422,87450,96388,29516,1165325,83608,13156,14263,28238,70482,381610,50323,75110,3138,190347,2528,9205,6233,80352,80774,1115,15720,13578,27844,35688,139873,44092,44835,24769,29870,372233,321976,1254,21445,19469,115179,9566,3442,3285,17303,41969,64208,36648,371142,5741,87484,264432,22946,6396,1014,20091,10381,7886,9065,51039,17874,250559,10706,43347,4074,8683,64267,34798,93407,15236,29726,28813,51620,5923,190727,22388,786,863,199076,18961,162406,74111,224417,24174,65245,199169,1531,1030,11272,2848,1699,10058,533169,48970,19354,13606,99121,668876,92625,21721,264389,8656,121188,51881,91526,4941,32395,178204,489331,16021,390700,47861,560566,10742,48027,224753,14062,245790,5108,31339,9784,7681,166317,49430,65307,14137,4634,10244,246116,623,16429,4533,24007,48714,2694,18095,10556,17020,48500,112945,58318,88414,14257,2081,1525,5393,1558,52358,112665,23655,204890,428564,84078,212944,562112,503278,19758,26379,1278,266589,96807,34029,28970,40689},
    {30880,687464,23105,244803,29654,14508,33343,327567,5708,3236,3810,132758,8564,6644,102468,143949,5038,32466,76855,50416,3577,12960,2061,19779,264903,5730,6504,24252,28810,147650,11155,72342,31685,1569,132380,16081,200765,23719,14342,24767,455366,284998,4348,315859,391314,2214,49503,11207,7584,218688,188775,36440,614036,15512,7034,22310,2213,511043,65617,275500,10807,54713,59230,19842,180245,122770,3295,1643,1092,6869,72349,321656,139986,363910,1293,7657,9530,60870,83094,132088,35162,61002,20453,14756,65092,12200,436862,1342,416717,119039,949,16619,23629,12509,9640,167449,76653,175401,26302,36111,100177,57534,29682,12774,151388,1199,3099,36886,632252,578176,7224,111326,15457,95808,23659,5682,1553,158914,144559,121294,34012,42727,17440,1748,26739,22841,23133,317557,79124,7555,70967,29902,1200,21328,2564,6782,690944,87523,1893,7809,6258,22955,40328,38624,131283,35491,19926,127433,1267,53732,2291,13500,69581,617,32467,7032,82998,165786,9708,22853,54810,4639,28306,238226,17142,1788,26251,51843,19268,39687,13656,7055,1674,5564,13233,26026,17078,7662,13805,6280,204000,161356,350201,9027,33033,176085,4459,1188,1874,66218,12169,85515,26710,47614,52044,21061,1593895,9909,196944,268999,42819,8215,62842,48018,801,116004,15509,26929,1532,10227,14425,98249,188277,522452,60762,63819,288909,2595,68224,2097,33897,94121,5904,48713,73001,7015,38690,50025,192352,28291,16541,77310,120518,756907,61312,92954,92750,122761,9959,19878,45916,226997,142758,193527,297009,1531,243303,48318,11256,19062,2088,28637,120010,208892,3380,7366,122394,12176,131079,58530,13759,173539,4062,171497,30715,14730,669777,6690,216303,62556,162606,141068,1330,128862,4610,91273,24034,15575,58251,43960,2064,4778,1763,189135,212705,11305,34489,1129809,23609,84608,1384151,274522,22197,287356,122105,3872,19010,119278,43786,1296175,9763,20934,2843,338998,1755,10129,57811,58384,238867,5232,13742,245194,158666,17685,12493,5786,133461,83860,1328,74670,178238,27168,230477,3040,809959,316943,15195,882215,513,16453,13765,161328,3914,157449,41065,9527,9346,1971,24358,127372,4389,32997,1471,119809,87812,1204,34465,23380,17491,36729,8518,411789,5047,8106,115517,19831,29332,8034,86565,61971,153374,52221,36420,31265,220754,43505,3057,28399,1117,173553,576856,79590,75318,13046,2988,211711,130620,12655,246587,84519,2062,119337,7724,19382,4059,219701,2930,109196,5028,1550,1776,2459,19948,235691,12206,31910,3814,36811,35678,15499,656228,56931,1385,901,94199,13242,5381,5889,3012,503392,124123,155493,7015,18801,48290,161290,16928,2875,1383,297111,9924,619917,17212,83670,775886,215253,166315,18938,417686,84008,8064,28068,23159,107763,14362,33929,9083,25357,97836,2046,1873,48607,19188,100941,40724,59214,34327,40540,14266,52035,13551,1449,213230,5913,21672,350485,12690,1335,671946,21125,2828,168246,66431,2388,6467,12030,1136,42205,694033,1498,242250,962206,129517,130324,9391,1289,70415,487968,20568,1962,57747,694,4034,10241,210598,18851,1669,13162,39565,7049,1686,137510,95375,44061,5472,65734,194492,39389,6065,20143,151658,9418,23904,25148,583727,372305,116967,167547,188117,380435,205417,568442,272545,134284,23363,17218,35760,1435,164499,1565,27552,9006,781036,10311,5616,9614,57619,184130,8036,10757,24866,64900,26021,1709,49314,1481,30213,519780,3788,17348,37846,112,227139,164795,425521,1883,111249,1909,1448,114896,6381,60927,17883,1240,41238,26593,30778,248236,409435,76214,3015,1688,21440,23911,1386,56024,240542,13345,368568,2049,2085,5351,7243,894,14102,21170,33760,8074,15168,1629,255823,1151,55255,5292,114553,388878,161086,21554,156149,29374,45705,161809,22804,77371,12562,59769,16587,15428,87391,52795,50947,139975,19664,5685,80019,62407,8366,29568,619843,7544,11203,24949,30526,29310,337011,17157,6843,10657,73155,3138,18285,304146,24548,4201,1099,98907,30609,1469,80215,2221,975,73466,195874,170827,166259,36409,29739,45373,106367,24768,111695,84785,18117,192373,59074,26992,9192,114476,1404,5013,331794,74731,10469,1568,526221,3755,7986,34587,951429,99749,35089,51684,943,17734,329719,29020,2010,60670,6718,1149622,1906,520858,123413,49319,18866,17888,171356,295359,215217,7540,385426,30976,777361,12106,74358,2034,26081,266005,21645,8429,2291,78261,14459,112215,12026,120405,57014,1943,17355,19224,2859,17392,2222,189275,93414,1262603,3575,497265,22772,25899,7962,224382,28110,249899,4298,2041,41761,9136,5152,1636706,225611,154007,81165,208593,68217,10717,2762,2915,47945,181903,1656,76688,93865,10310,93048,18996,290073,46437,3231,44144,1096,31712,20152,4761,19964,2760,287941,2667,625594,181429,25179,243473,176611,7214,6203,136613,23571,326160,324915,355670,15331,11497,8166,86240,109122,58228,20803,324801,13154,1809,88869,43206,1658,22216,146401,81895,81771,137490,23952,30153,16840,60340,4624,13924,8295,278870,3128,121174,11972,120595,1741,38220,6957,60350,19713,74621,19640,615851,141717,12994,70225,28421,470159,380604,11721,25169,32979,6403,55456,11747,1361,23020,275186,5441,32452,236634,420724,14580,3190,31336,82728,7643,186181,4979,281613,1238122,11281,346486,4620,212359,67909,20471,87149,20751,60476,8644,60171,134996,3497,31935,246116,53796,13401,98983,647386,69555,298945,24791,57637,12353,9672,22730,46241,171888,1113,42971,10362,1622,14181,158145,6354,4375,54905,437976,14599,152649,109744,10200,2934,41451,13253,158841,88641,155005,2796,4210,477212,156523,197863,25589,3642,278234,1141,2534,10126,136383,10734,8899,52302,6982,43088,3808,266249,994,342223,8952,2270,605629,2612,19442,72453,6225,13325,25427,9878,192825,4934,38413,12323,32295,2641,2177,37453,1141,13008,1260,92846,4603,19249,77121,53613,28758,2515,7133,84682,25668,393892,59871,7539,6658,131414,69037,269995,49195,227759,3196,80416,7459,43282,237048,19053,19684,7271,6136,183247,3328,19083,45762,85055,295949,29854,405273,9239,9065,23323,135495,185868,59105,30828,11134,2621,304315,1776,139094,2367,460045,34138,22701,310345,3074,294061,9376,1685,16223,9612,10504,1670,7037,58065,173673,1658,2403,39833,1226,17137,50162,5627,56733,21688,726623,38728,1524,161902,212275,8922,84000,279191,16393,501141,36224},
  };
  for (bool simple_graphs : {true, false}) {
    cout << "Randomized stress test" << endl;
    Random random(123);
    const int repeat = 1;
    clock_t c = 0;
    for (int trial = 0; trial < trials; ++trial) {
      int M = 1 + int(1000 * random.RandExp());
      int N = std::max(int(1.5 + sqrt(2.0 * M)),
                             int(M / (1 + 3 * random.RandExp())));
      UndirectedGraph g = LargestComponent(ErdosRenyi(N, M, simple_graphs, &random));
      CHECK_GE(g.NumNodes(), int(N * 0.6));
      N = g.NumNodes();
      M = g.NumEdges();
      vector<Edge> edges;
      edges.reserve(M);
      for (int a = 0; a < N; ++a) {
        for (int b : g.Neighbors(a)) if (b >= a) {
          edges.push_back({a, b, random.Uniform(1000)});
          if (random.Uniform(2)) {
            std::swap(edges.back().node1, edges.back().node2);
          }
        }
      }
      shuffle(edges.begin(), edges.end(), random);
      c -= clock();
      for (int i = 0; i < repeat; ++i) {
        CHECK_EQ(Prim(N, edges), expected[simple_graphs ? 0 : 1][trial]);
      }
      c += clock();
    }
    double t = double(c) / CLOCKS_PER_SEC;
    cout << "Time: " << t << "s" << endl;
    cout << "PASSED at line " << __LINE__ << endl;
  }
}
